[binaries]
c       = 'arm-none-eabi-gcc'
cpp     = 'arm-none-eabi-g++'
ld      = 'arm-none-eabi-gcc'
ar      = 'arm-none-eabi-ar'
as      = 'arm-none-eabi-as'
size    = 'arm-none-eabi-size'
objdump = 'arm-none-eabi-objdump'
objcopy = 'arm-none-eabi-objcopy'
strip   = 'arm-none-eabi-strip'
gdb     = 'arm-none-eabi-gdb'    
[built-in options]
c_args      =   [
    '-mcpu=cortex-m4',
    '-mthumb',
    '-mfpu=fpv4-sp-d16',
    '-mfloat-abi=hard',
    '-fdata-sections',
    '-ffunction-sections',
    '-Wall',
    '-Wextra',
    '-gdwarf-2',
                ]
c_link_args =   [
                '-mcpu=cortex-m4',
#                '-nostdlib',
#                '-specs=nano.specs',
                '-mfloat-abi=hard',
#                '-lc',
#                '-lm',
#                '-lnosys',
                '-Wl,--gc-sections',
#                '-u _printf_float',
                '-Wl,--no-warn-rwx-segment',
                ]
[project options]
target = 'ARMCM4_STM32F4'
[openblt:built-in options]
warning_level = '0'
[openblt:project options]
build_demo = false
[printf:built-in options]
warning_level = '0'
[cmake]
CMAKE_SYSTEM_NAME = 'Generic'
CMAKE_SYSTEM_PROCESSOR = 'ARM'
TOOLCHAIN = 'arm-none-eabi'
CMAKE_TRY_COMPILE_TARGET_TYPE = 'STATIC_LIBRARY'
CMAKE_C_COMPILER = 'arm-none-eabi-gcc'
CMAKE_CXX_COMPILER = 'arm-none-eabi-g++'
CMAKE_ASM_COMPILER = 'arm-none-eabi-gcc'
[host_machine]
system     = 'none'
cpu_family = 'arm'
cpu        = 'cortex-m4'
endian     = 'little'